{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputState","setInputState","onSubmit","event","preventDefault","trim","length","categories","onChange","value","target","type","prototype","PropTypes","func","isRequired","defaultProps","GifGridItem","gif","title","url","className","alt","src","getGif","category","a","fetch","encodeURI","method","response","json","data","gifs","map","id","images","downsized_large","useFethcGif","loading","state","setstate","useEffect","then","GifGrid","GifExpertApp","setState","ReactDOM","render","document","getElementById"],"mappings":"0NAIMA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OAAO,sBAAMC,SARO,SAACC,GACjBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,MAIf,SACC,uBAAOO,SAXW,SAAC,GAAD,IAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BR,EAAcQ,IAWrBA,MAAOT,EAAYW,KAAK,YAI1Ed,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,YAGlClB,EAAYmB,aAAe,CACvBlB,cAAe,cAGJD,QCrBAoB,EATK,SAAC,GAA6B,IAAD,IAA1BC,IAAOC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,IAEjC,OAAO,sBAAKC,UAAU,6DAAf,UACH,qBAAKC,IAAMH,EAAQI,IAAMH,IACzB,kCAAMD,EAAN,W,uBCHFK,EAAM,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DAEI,mCACE,uCAHN,SAKYC,MAAM,GAAD,OAFX,uCAEW,oBAHb,mCAGa,cAAqCC,UAAUH,GAA/C,UAAmE,IAAM,CAAEI,OAAQ,QALpG,cAKLC,EALK,gBAMYA,EAASC,OANrB,uBAMHC,EANG,EAMHA,KACFC,EAAOD,EAAKE,KAAK,gBAAEC,EAAF,EAAEA,GAAiCf,EAAnC,EAAMgB,OAAUC,gBAAmBjB,IAAnC,MAAyD,CAAEe,KAAIhB,MAA/D,EAA4CA,MAA0BC,UAPlF,kBAQJa,GARI,4CAAH,sDAWGT,ICGAc,EAZK,SAACb,GAEjB,MAA0B1B,mBAAS,CAAEiC,KAAM,GAAIO,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAOA,OALAC,qBAAW,WACPlB,EAAOC,GAAUkB,MAAM,SAAAV,GAAI,OAAIQ,EAAS,CAAET,KAAMC,EAAMM,SAAS,SAChE,CAACd,IAGGe,GCQII,EAjBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,EAA0Ba,EAAYb,GAA9BO,EAAR,EAAQA,KAAMO,EAAd,EAAcA,QAEd,OAAO,qCACH,oCAAQd,EAAR,OACEc,GAAW,sBAAKlB,UAAU,iBAAf,eAAkC,2CAAlC,OACb,qBAAKA,UAAU,WAAf,SACEW,EAAKE,KAAK,SAAAhB,GAAG,OAAI,cAAC,EAAD,CAA4BA,IAAMA,GAAfA,EAAIiB,aCQnCU,EAfM,WAEjB,MAA+B9C,mBAAS,CAAC,mBAAzC,mBAAOQ,EAAP,KAAmBuC,EAAnB,KAEA,OAAO,qCACH,oDACA,cAAC,EAAD,CAAahD,cAAgBgD,IAC7B,uBAEA,6BACMvC,EAAW2B,KAAK,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCVxDsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.726844d8.chunk.js","sourcesContent":["\nimport { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputState, setInputState] = useState(\"\");\n\n    const handleInputChange = ({ target: { value } }) => setInputState(value);\n    \n    const handleSumit = (event) => {\n        event.preventDefault();\n        if (inputState.trim().length > 2) {\n            setCategories(categories => [ inputState, ...categories ]);\n            setInputState('');\n        }\n    }\n\n    return <form onSubmit={ handleSumit }>\n            <input onChange={ handleInputChange } value={inputState} type=\"text\" />\n    </form>\n}\n\nAddCategory.prototype = {\n    setCategories: PropTypes.func.isRequired\n}\n\nAddCategory.defaultProps = {\n    setCategories: () => {}\n}\n\nexport default AddCategory;","\nconst GifGridItem = ({ gif: { title, url } }) => {\n\n    return <div className=\"card animate__animated animate__bounce animate__fadeInDown\">\n        <img alt={ title } src={ url } />\n        <p> { title } </p>\n    </div>\n\n}\n\nexport default GifGridItem;","\n\nconst getGif = async(category) => {\n\n    const apiKey = \"qPsZQJFTytqz0J6TqTmCZb58dTWaqyRX\";\n    const endPoint = \"https://api.giphy.com/v1/gifs/search\";\n\n    const response = await fetch(`${endPoint}?api_key=${apiKey}&q=${ encodeURI(category) }&limit=${10}`, { method: 'get' });\n    const { data } = await response.json();\n    const gifs = data.map( ({id, images: { downsized_large: { url } }, title }) => ({ id, title, url }) );\n    return gifs;\n}\n\nexport default getGif;","\nimport { useState, useEffect } from 'react';\nimport getGif from '../helpers/getGifs';\n\nconst useFethcGif = (category) => {\n\n    const [state, setstate] = useState({ data: [], loading: true });\n\n    useEffect( () => {\n        getGif(category).then( gifs => setstate({ data: gifs, loading: false }) );\n    }, [category])\n\n\n    return state;\n}\n\nexport default useFethcGif;","\nimport GifGridItem from \"./GifGridItem\";\nimport useFethcGif from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n\n    const { data, loading } = useFethcGif(category);\n\n    return <>\n        <h3>  { category } </h3>\n        { loading && <div className=\"animate__flash\">  <p> Cargando </p> </div> }\n        <div className=\"cardGrid\">\n        { data.map( gif => <GifGridItem key={ gif.id } gif={ gif } /> ) }    \n        </div>\n    </>\n}\n\n/*\n    \n*/\n\nexport default GifGrid;","\nimport { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setState] = useState(['rick and morty']);\n\n    return <>\n        <h2> Gif Expert Class </h2>\n        <AddCategory setCategories={ setState } />\n        <hr/>\n\n        <ol>\n            { categories.map( category => <GifGrid key={category} category={category} /> ) }\n        </ol>\n    </>\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}